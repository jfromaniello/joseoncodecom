SyntaxHighlighter.brushes.Clojure=function(){var a=":arglists :doc :file :line :macro :name :ns :private :tag :test new alias alter and apply assert class cond conj count def defmacro defn defstruct deref do doall dorun doseq dosync eval filter finally find first fn gen-class gensym if import inc keys let list loop map ns or print println quote rand recur reduce ref repeat require rest send seq set sort str struct sync take test throw trampoline try type use var vec when while";this.regexList=[{regex:new RegExp(";[^]]+$","gm"),css:"comments"},{regex:SyntaxHighlighter.regexLib.multiLineDoubleQuotedString,css:"string"},{regex:/\[|\]/g,css:"keyword"},{regex:/'[a-z][A-Za-z0-9_]*/g,css:"color1"},{regex:/:[a-z][A-Za-z0-9_\-]*/g,css:"color2"},{regex:new RegExp(this.getKeywords(a),"gmi"),css:"functions"}];this.forHtmlScript(SyntaxHighlighter.regexLib.aspScriptTags)};SyntaxHighlighter.brushes.Clojure.prototype=new SyntaxHighlighter.Highlighter();SyntaxHighlighter.brushes.Clojure.aliases=["clojure","Clojure","clj"];SyntaxHighlighter.brushes.FSharp=function(){var d="abstract and as assert base begin class default delegate do done downcast downto elif else end exception extern false finally for fun function if in inherit inline interface internal lazy let match member module mutable namespace new null of open or override private public rec return static struct then to true try type upcast use val void when while with yield";var b="asr land lor lsl lsr lxor mod sig";var a="atomic break checked component const constraint constructor continue eager event external fixed functor global include method mixin object parallel process protected pure sealed tailcall trait virtual volatile";var c="let! use! do! yield! return! \\| -> <- \\. : \\( \\) \\[ \\] \\[< >\\] \\[\\| \\|\\] \\{ \\} ' # :\\?> :\\? ; ;; :> := _ \\.\\. ::";this.regexList=[{regex:SyntaxHighlighter.regexLib.singleLineCComments,css:"comments"},{regex:new RegExp("\\(\\*[\\s\\S]*?\\*\\)","gm"),css:"comments"},{regex:SyntaxHighlighter.regexLib.doubleQuotedString,css:"string"},{regex:new RegExp("^\\s*#.*","gm"),css:"preprocessor"},{regex:new RegExp(this.getKeywords(d),"gm"),css:"keyword"},]};SyntaxHighlighter.brushes.FSharp.prototype=new SyntaxHighlighter.Highlighter();SyntaxHighlighter.brushes.FSharp.aliases=["f#","f-sharp","fsharp"];SyntaxHighlighter.brushes.Latex=function(){var a="if fi then elif else for do done until while break continue case function return in eq ne gt lt ge le";this.regexList=[{regex:new RegExp("%.*","gm"),css:"comments"},{regex:SyntaxHighlighter.regexLib.doubleQuotedString,css:"string"},{regex:new RegExp("\\\\\\w*","gm"),css:"keyword"},{regex:new RegExp(this.getKeywords(a),"gm"),css:"function"},]};SyntaxHighlighter.brushes.Latex.prototype=new SyntaxHighlighter.Highlighter();SyntaxHighlighter.brushes.Latex.aliases=["latex","tex"];SyntaxHighlighter.brushes.MatlabKey=function(){var a="break case catch classdef continue else elseif end for function global if otherwise parfor persistent return spmd switch try while";var b=" ";this.regexList=[{regex:/%.*$/gm,css:"comments"},{regex:/\%\{[\s\S]*?\%\}/gm,css:"comments"},{regex:SyntaxHighlighter.regexLib.singleQuotedString,css:"string"},{regex:SyntaxHighlighter.regexLib.doubleQuotedString,css:"string"},{regex:new RegExp(this.getKeywords(a),"gm"),css:"keyword"}]};SyntaxHighlighter.brushes.MatlabKey.prototype=new SyntaxHighlighter.Highlighter();SyntaxHighlighter.brushes.MatlabKey.aliases=["matlabkey","matlab"];SyntaxHighlighter.brushes.ObjC=function(){var b="char bool BOOL double float int long short id void";var a="IBAction IBOutlet SEL YES NO readwrite readonly nonatomic nil NULL ";a+="super self copy ";a+="break case catch class const copy __finally __exception __try ";a+="const_cast continue private public protected __declspec ";a+="default delete deprecated dllexport dllimport do dynamic_cast ";a+="else enum explicit extern if for friend goto inline ";a+="mutable naked namespace new noinline noreturn nothrow ";a+="register reinterpret_cast return selectany ";a+="sizeof static static_cast struct switch template this ";a+="thread throw true false try typedef typeid typename union ";a+="using uuid virtual volatile whcar_t while";this.regexList=[{regex:SyntaxHighlighter.regexLib.singleLineCComments,css:"comment"},{regex:SyntaxHighlighter.regexLib.multiLineCComments,css:"comment"},{regex:SyntaxHighlighter.regexLib.doubleQuotedString,css:"string"},{regex:SyntaxHighlighter.regexLib.singleQuotedString,css:"string"},{regex:new RegExp("^ *#.*","gm"),css:"preprocessor"},{regex:new RegExp(this.getKeywords(b),"gm"),css:"datatypes"},{regex:new RegExp(this.getKeywords(a),"gm"),css:"keyword"},{regex:new RegExp("\\bNS\\w+\\b","g"),css:"keyword"},{regex:new RegExp("@\\w+\\b","g"),css:"keyword"},{regex:new RegExp('@"(?:\\.|(\\\\\\")|[^\\""\\n])*"',"g"),css:"string"}]};SyntaxHighlighter.brushes.ObjC.prototype=new SyntaxHighlighter.Highlighter();SyntaxHighlighter.brushes.ObjC.aliases=["objc","obj-c"];SyntaxHighlighter.brushes.R=function(){var b="if else repeat while function for in next break TRUE FALSE NULL Inf NaN NA NA_integer_ NA_real_ NA_complex_ NA_character_";var a="LETTERS letters month.abb month.name pi";this.regexList=[{regex:SyntaxHighlighter.regexLib.singleLinePerlComments,css:"comments"},{regex:SyntaxHighlighter.regexLib.singleQuotedString,css:"string"},{regex:SyntaxHighlighter.regexLib.doubleQuotedString,css:"string"},{regex:new RegExp(this.getKeywords(b),"gm"),css:"keyword"},{regex:new RegExp(this.getKeywords(a),"gm"),css:"constants"},{regex:/[\w._]+[ \t]*(?=\()/gm,css:"functions"},]};SyntaxHighlighter.brushes.R.prototype=new SyntaxHighlighter.Highlighter();SyntaxHighlighter.brushes.R.aliases=["r","s","splus"];